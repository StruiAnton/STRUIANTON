/////////////////////////arta.h//////////////////////////////////////////////
#pragma once
#ifndef ARTA_H
#define ARTA_H
#include <string>
#include <iostream>
#include <fstream>
#include <conio.h>
#include <windows.h>
#include <cstdlib>

using namespace std;

class arta {
public:
	int N = 10;                                                                        
	int Y = 3;
	int nem = 2;
	char mas[11][11];
	char mas1[11][11];  
	char mas2[11][11];
	void artaa(); 
	void mesto(int i, int j, char v);
	void left(char v); 
	void right(char v);  
	void top(char v);    
	void under(char v);    
	void print();
	void pri();
	void upravprileft(); 
	void upravpriright();                                                              
	void upravpritop();                                                                
	void upravpriunder();                                                             
	int shot(char v);                                                                   
	void peredachakart(arta& v);                                                       
	void peredachakart1(arta& v);                                                       
	void kompmesto(char v);                                                            
	int kompleft(char v);                                                              
	int kompright(char v);                                                              
	int komptop(char v);                                                                
	int kompunder(char v);                                                              
	int kompshot(char v);                                                               
	int KYDAPoexat(arta& v, char p, char q);                                            
	int sovetartsuper(char v);                                                          
	int americanartsuper(int i, int j, char v);                                         
	int nemartsuper(int i, int j, char v);                                              
	void vborkarta();
	void zapolnenie(char *a);
};
int xodsovet(arta& f, arta& v, char f1, char v1);                                       
int xodamerica(arta& f, arta& v, char f1, char v1);                                     
int xodnem(arta& f, arta& v, char f1, char v1);                                         
void taumer();                                                                                                                                                   
char menu();                                                                             
int vbor();                                            
void razrabotchiki();                                                                                                                                            
void incialplaer(arta& f, int y);
int vborcomp();                                                                         
void incialcomp(arta& f, int y);                                                        
void incialplayerinternet(arta& f,char v,int i,int j);

#endif
///////////////////////////main////////////////////////////////////////
#include "pch.h"
#pragma comment(lib,"ws2_32.lib")
#include <WinSock2.h>
#include "arta.h"

using namespace std;

char V[200];
int iii=0;
int jjj=0;

void arta::vborkarta() {
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			V[((i - 1) * 10) + j - 1] = mas[i][j];
		}
	}
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			V[((i - 1) * 10) + j - 1 + 100] = mas2[i][j];
		}
	}
}

void arta::zapolnenie(char *a) {
	int o = 0;
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			mas[i][j] = a[o];
			o += 1;
		}
	}
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			mas2[i][j] = a[o];
			o += 1;
		}
	}
	for (int i = 1; i < 11; i++) {
		mas2[i][0]=mas[i][0] = (char)(((int)'0') + i - 1);
	}
	for (int j = 1; j < 11; j++) {
		mas2[0][j]=mas[0][j] = (char)(((int)'0') + j - 1);
	}
	mas2[0][0] = mas[0][0] = ' ';
}

void incialplayerinternet(arta & f,char v,int i,int j) {
	f.artaa();
	f.mesto(i,j,v);
}

void arta::artaa() {
	for (int i = 0; i < N + 1; i++) {
		for (int j = 0; j < N + 1; j++) {
			mas[i][j] = '.';
		}
	}
	for (int i = 0; i < N + 1; i++) {
		for (int j = 0; j < N + 1; j++) {
			mas1[i][j] = ' ';
		}
	}
	for (int i = 1; i < 11; i++) {
		mas1[i][0] = mas[i][0] = (char)(((int)'0') + i - 1);
	}
	for (int j = 1; j < 11; j++) {
		mas1[0][j] = mas[0][j] = (char)(((int)'0') + j - 1);
	}
	mas1[0][0] = mas[0][0] = ' ';
}

void arta::mesto(int i, int j, char v) {
	iii = i;
	jjj = j;
	mas[i + 1][j + 1] = v; 
}

void arta::left(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (f > 1) {
		if (mas[k][f - 1] == 'O') {
		}
		else {
			mas[k][f] = '.';
			mas[k][f - 1] = v;
		}
	}
	if (f == 1) {
	}
}

void arta::right(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (f < N) {
		if (mas[k][f + 1] == 'O') {
		}
		else {
			mas[k][f] = '.';
			mas[k][f + 1] = v;

		}
	}
	if (f == N) {
	}
}

void arta::top(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (k > 1) {
		if (mas[k - 1][f] == 'O') {
		}
		else {
			mas[k][f] = '.';
			mas[k - 1][f] = v;
		}
	}
	if (k == 1) {
	}
}

void arta::under(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (k < N) {
		if (mas[k + 1][f] == 'O') {
		}
		else {
			mas[k][f] = '.';
			mas[k + 1][f] = v;
		}
	}
	if (k == N) {
	}

}

void arta::print() {
	for (int i = 0; i < N + 1; i++)
	{
		for (int j = 0; j < N + 1; j++)
		{
			cout << mas[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	for (int i = 0; i < N + 1; i++)
	{
		for (int j = 0; j < N + 1; j++)
		{
			cout << mas1[i][j] << " ";
		}
		cout << endl;
	}
}

void arta::pri() {
	int i;
	int j;
	j = rand() % 10 + 1;
	i = rand() % 10 + 1;
	mas1[i][j] = '+';
}

void arta::upravprileft() {
	int f, k;
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			if (mas1[i][j] == '+') {
				k = i;
				f = j;
			}
		}
	}
	if (f > 1) {
		if (mas2[k][f] == 'O') {
			mas1[k][f - 1] = '+';
			mas1[k][f] = 'O';
		}
		else {
			mas1[k][f - 1] = '+';
			mas1[k][f] = ' ';
		}
	}
	if (f == 1) {
	}
}

void arta::upravpriright() {
	int f, k;
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			if (mas1[i][j] == '+') {
				k = i;
				f = j;
			}
		}
	}
	if (f < 10) {
		if (mas2[k][f] == 'O') {
			mas1[k][f + 1] = '+';
			mas1[k][f] = 'O';
		}
		else {
			mas1[k][f + 1] = '+';
			mas1[k][f] = ' ';
		}
	}
	if (f == 10) {
	}
}

void arta::upravpriunder() {
	int f, k;
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			if (mas1[i][j] == '+') {
				k = i;
				f = j;
			}
		}
	}
	if (k < 10) {
		if (mas2[k][f] == 'O') {
			mas1[k + 1][f] = '+';
			mas1[k][f] = 'O';
		}
		else {
			mas1[k + 1][f] = '+';
			mas1[k][f] = ' ';
		}
	}
	if (k == 10) {
	}
}

void arta::upravpritop() {
	int f, k;
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			if (mas1[i][j] == '+') {
				k = i;
				f = j;
			}
		}
	}
	if (k > 1) {
		if (mas2[k][f] == 'O') {
			mas1[k - 1][f] = '+';
			mas1[k][f] = 'O';
		}
		else {
			mas1[k - 1][f] = '+';
			mas1[k][f] = ' ';
		}
	}
	if (k == 1) {
	}
}

int arta::shot(char v) {
	int f, k;
	for (int i = 1; i < 11; i++) {
		for (int j = 1; j < 11; j++) {
			if (mas1[i][j] == '+') {
				k = i;
				f = j;
			}
		}
	}
	if (mas2[k][f] == v) {
		return 1;
	}
	if (mas2[k][f] == 'O') {
		cout << "Нельзя" << endl;
		mas1[k][f] = 'O';
		return 3;
	}
	else {
		mas1[k][f] = 'O';
		mas2[k][f] = 'O';
		return 2;
	}
}

void arta::peredachakart(arta& v) {
	for (int i = 0; i < 11; i++) {
		for (int j = 0; j < 11; j++) {
			v.mas2[i][j] = mas[i][j];
		}
	}
}

void arta::peredachakart1(arta& v) {
	for (int i = 0; i < 11; i++) {
		for (int j = 0; j < 11; j++) {
			v.mas[i][j] = mas2[i][j];
		}
	}
}

void incialplaer(arta& f, int y) {
	char v;
	if (y == 1) {
		v = '>';
	}
	if (y == 2) {
		v = '%';
	}
	if (y == 3) {
		v = '$';
	}
	f.artaa();
	cout << "1.Карта 10/10" << endl;
	int i, j;
	cout << "Введите начальное местоположение" << endl;
	cin >> i;
	cin >> j;
	if (i < 10 && j<10 && i>-1) {
		f.mesto(i, j, v);
	}
	else {
		cout << "Ошибка" << endl;
		Sleep(5000);
		system("cls");
		cout << "Введите данные праильно!" << endl;
		return incialplaer(f, y);
	}
}

void incialcomp(arta& f, int y) {
	char v;
	if (y == 1) {
		v = '>';
	}
	if (y == 2) {
		v = '%';
	}
	f.kompmesto(v);
}

void arta::kompmesto(char v) {
	int i;
	int j;
	j = rand() % 10;
	i = rand() % 10;
	if (i < 10 && j<10 && i>-1) {
		mas[i + 1][j + 1] = v; 
	}
	else {
		return kompmesto(v);
	}
}

int arta::kompleft(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (f > 1) {
		if (mas[k][f - 1] == 'O') {
			return 2;
		}
		else {
			mas[k][f] = '.';
			mas[k][f - 1] = v;
			return 1;
		}
	}
	if (f == 1) {
		return 2;
	}
}

int arta::kompright(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (f < N) {
		if (mas[k][f + 1] == 'O') {
			return 2;
		}
		else {
			mas[k][f] = '.';
			mas[k][f + 1] = v;
			return 1;

		}
	}
	if (f == N) {
		return 2;
	}
}

int arta::komptop(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (k > 1) {
		if (mas[k - 1][f] == 'O') {
			return 2;
		}
		else {
			mas[k][f] = '.';
			mas[k - 1][f] = v;
			return 1;
		}
	}
	if (k == 1) {
		return 2;
	}
}

int arta::kompunder(char v) {
	int f, k;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == v) {
				k = i;
				f = j;
			}
		}
	}
	if (k < N) {
		if (mas[k + 1][f] == 'O') {
			return 2;
		}
		else {
			mas[k][f] = '.';
			mas[k + 1][f] = v;
			return 1;
		}
	}
	if (k == N) {
		return 2;
	}
}

int arta::kompshot(char v) {
	int f, k;
	f = rand() % 10 + 1;
	k = rand() % 10 + 1;

	if (mas2[k][f] == v) {
		cout << "Вы проиграли" << endl;
		Sleep(7000);
		return 3;
	}
	if (mas2[k][f] == 'O') {
		return kompshot(v);
	}
	else {
		mas2[k][f] = 'O';
		return 1;
	}
}

int arta::KYDAPoexat(arta& v, char p, char q) {
	int k;
	k = rand() % 6 + 1;
	int f, l;
	for (int i = 1; i < N + 1; i++) {
		for (int j = 1; j < N + 1; j++) {
			if (mas[i][j] == p) {
				l = i;
				f = j;
			}
		}
	}
	if (k == 1) {
		int y;
		y = v.kompleft(p);
		if (y == 2) {
			return KYDAPoexat(v, p, q);
		}
		return 1;
	}
	if (k == 2) {
		int o;
		o = v.kompright(p);
		if (o == 2) {
			return KYDAPoexat(v, p, q);
		}
		return 1;
	}
	if (k == 3) {
		int o1;
		o1 = v.komptop(p);
		if (o1 == 2) {
			return KYDAPoexat(v, p, q);
		}
		return 1;
	}
	if (k == 4) {
		int o2;
		o2 = v.kompunder(p);
		if (o2 == 2) {
			return KYDAPoexat(v, p, q);
		}
		return 1;
	}
	if (k == 5) {
		int o3 = v.kompshot(q);
		if (o3 == 3) {
			return 3;
		}
		else {
			return 1;
		}
	}
	if (k == 6) {
		if (p == '>') {
			int h9 = sovetartsuper(q);
			if (h9 == 1) {
				cout << "Вы проиграли" << endl;
				Sleep(7000);
				return 3;
			}
			if (h9 == 2) {
				return 1;
			}
			return 1;
		}
		if (p == '%') {
			int h11 = rand() % 10;
			int h12 = rand() % 10;
			int h10 = nemartsuper(q, h11, h12);
			if (h10 == 1) {
				cout << "Вы проиграли" << endl;
				Sleep(7000);
				return 3;
			}
			if (h10 == 2) {
				return 1;
			}
			return 1;
		}
	}
}

int vborcomp() {
	cout << "Выберите страну компьютеру" << endl;
	cout << endl;
	cout << "_____  __________________________            __      _________                                                          ______          " << endl;
	cout << " __ / / /__  ___/__  ___/___  __ )          / /     __  _____/____  ___________________ ______ _______ _____  __        __|__ )        " << endl;
	cout << "_  / / / _____ ( _____ ( __  /_/ /         / /      _  / __  _  _ )__  ___/__  __ `__ )_  __ `/__  __ )__  / / /        ____/ /         " << endl;
	cout << "/ /_/ /  ____/ / ____/ / _  _, _/         / /       / /_/ /  /  __/_  /    _  / / / / // /_/ / _  / / /_  /_/ /         _  __/         " << endl;
	cout << "(____/   /____/  /____/  /_/ |_|         /_/        (____/   (___/ /_/     /_/ /_/ /_/ (__,_/  /_/ /_/ _(__, /          /____/          " << endl;
	cout << "                                                                                                       /____/                           " << endl;
	cout << endl;
	char k;
	while (1) {
		k = _getch();
		if (k == '1' || k == '2') { break; }
	}
	system("cls");
	if (k == '1') {
		return 1;
	}
	if (k == '2') {
		return 2;
	}
}

int arta::sovetartsuper(char v) {
	if (Y != 0) {
		int i = rand() % 10 + 1;
		int j = rand() % 10 + 1;
		int i1 = rand() % 10 + 1;
		int j1 = rand() % 10 + 1;
		int i2 = rand() % 10 + 1;
		int j2 = rand() % 10 + 1;
		int i3 = rand() % 10 + 1;
		int j3 = rand() % 10 + 1;
		int i4 = rand() % 10 + 1;
		int j4 = rand() % 10 + 1;
		if (mas2[i][j] == v) {
			mas1[i][j] = v;
			mas2[i1][j1] = mas1[i1][j1] = 'O';
			mas2[i2][j2] = mas1[i2][j2] = 'O';
			mas2[i3][j3] = mas1[i3][j3] = 'O';
			mas2[i4][j4] = mas1[i4][j4] = 'O';
			return 1;
		}
		if (mas2[i1][j1] == v) {
			mas1[i1][j1] = v;
			mas2[i][j] = mas1[i][j] = 'O';
			mas2[i2][j2] = mas1[i2][j2] = 'O';
			mas2[i3][j3] = mas1[i3][j3] = 'O';
			mas2[i4][j4] = mas1[i4][j4] = 'O';
			return 1;
		}
		if (mas2[i2][j2] == v) {
			mas1[i2][j2] = v;
			mas2[i][j] = mas1[i][j] = 'O';
			mas2[i1][j1] = mas1[i1][j1] = 'O';
			mas2[i3][j3] = mas1[i3][j3] = 'O';
			mas2[i4][j4] = mas1[i4][j4] = 'O';
			return 1;
		}
		if (mas2[i3][j3] == v) {
			mas1[i3][j3] = v;
			mas2[i][j] = mas1[i][j] = 'O';
			mas2[i1][j1] = mas1[i1][j1] = 'O';
			mas2[i2][j2] = mas1[i2][j2] = 'O';
			mas2[i4][j4] = mas1[i4][j4] = 'O';
			return 1;
		}
		if (mas[i4][j4] == v) {
			mas1[i4][j4] = v;
			mas2[i][j] = mas1[i][j] = 'O';
			mas2[i1][j1] = mas1[i1][j1] = 'O';
			mas2[i2][j2] = mas1[i2][j2] = 'O';
			mas2[i3][j3] = mas1[i3][j3] = 'O';
			return 1;
		}
		else {
			Y -= 1;
			mas2[i][j] = mas1[i][j] = 'O';
			mas2[i1][j1] = mas1[i1][j1] = 'O';
			mas2[i2][j2] = mas1[i2][j2] = 'O';
			mas2[i3][j3] = mas1[i3][j3] = 'O';
			mas2[i4][j4] = mas1[i4][j4] = 'O';
			return 2;
		}
	}
	else {
		return 3;
	}
}

int arta::americanartsuper(int i, int j, char v) {
	i += 1;
	j += 1;
	if (Y != 0) {
		if (j + 1 != 11 && j - 1 != 0 && i + 1 != 11 && i - 1 != 0) {
			if (mas2[i][j] == v) {
				mas1[i][j] = v;
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				return 1;
			}
			if (mas2[i - 1][j] == v) {
				mas1[i - 1][j] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				return 1;
			}
			if (mas2[i + 1][j] == v) {
				mas1[i + 1][j] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				return 1;
			}
			if (mas2[i][j - 1] == v) {
				mas1[i][j - 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				return 1;
			}
			if (mas2[i][j + 1] == v) {
				mas1[i][j + 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				return 1;
			}
			else {
				Y -= 1;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				return 2;
			}
		}
		else {
			return 3;
		}
	}
	else {
		return 3;
	}
}

int arta::nemartsuper(int i, int j, char v) {
	i += 1;
	j += 1;
	if (Y != 0) {
		if (j + 1 != 11 && j - 1 != 0 && i + 1 != 11 && i - 1 != 0) {
			if (mas2[i][j] == v) {
				mas1[i][j] = v;
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i - 1][j] == v) {
				mas1[i - 1][j] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i + 1][j] == v) {
				mas1[i + 1][j] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i][j - 1] == v) {
				mas1[i][j - 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i][j + 1] == v) {
				mas1[i][j + 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i - 1][j - 1] == v) {
				mas1[i - 1][j - 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i + 1][j + 1] == v) {
				mas1[i + 1][j + 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i - 1][j + 1] == v) {
				mas1[i - 1][j + 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 1;
			}
			if (mas2[i + 1][j - 1] == v) {
				mas1[i + 1][j - 1] = v;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				return 1;
			}
			else {
				nem -= 1;
				mas2[i][j] = mas1[i][j] = 'O';
				mas2[i - 1][j] = mas1[i - 1][j] = 'O';
				mas2[i + 1][j] = mas1[i + 1][j] = 'O';
				mas2[i][j - 1] = mas1[i][j - 1] = 'O';
				mas2[i][j + 1] = mas1[i][j + 1] = 'O';
				mas2[i - 1][j - 1] = mas1[i - 1][j - 1] = 'O';
				mas2[i + 1][j + 1] = mas1[i + 1][j + 1] = 'O';
				mas2[i - 1][j + 1] = mas1[i - 1][j + 1] = 'O';
				mas2[i + 1][j - 1] = mas1[i + 1][j - 1] = 'O';
				return 2;
			}
		}
		else {
			return 3;
		}
	}
	else {
		return 3;
	}
}

void taumer() {
	for (int i = 0; i <= 9; i++) {
		char dig = (char)(((int)'9') - i);
		cout << dig << " ";
		Sleep(1000);
	}
}

char menu() {
	const char str2[] = "_______         _____ _____ ____________                      ";
	const char str3[] = "___    |__________  /____(_)___  /___  /_____ _____________  __";
	const char str4[] = "__  /| |__  ___/_  __/__  / __  / __  / _  _ )__  ___/__  / / /";
	const char str5[] = "_  ___ |_  /    / /_  _  /  _  /  _  /  /  __/_  /    _  /_/ /";
	const char str6[] = "/_/  |_|/_/     (__/  /_/   /_/   /_/   (___/ /_/     _(__, /";
	const char str7[] = "                                                      /____/";
	cout << str2 << endl;
	cout << str3 << endl;
	cout << str4 << endl;
	cout << str5 << endl;
	cout << str6 << endl;
	cout << str7 << endl;
	char k;
	cout << "1.Играть с компьютером." << endl;
	cout << "2.Играть вдвоем." << endl;
	cout << "3.Авторизоваться." << endl;
	cout << "4.Помощь." << endl;
	cout << "5.Разработчики." << endl;
	cout << "6.Играть по сети." << endl;
	cout << "7.Выход." << endl;
	while (1) {
		k = _getch();
		if (k == '1' || k == '2' || k == '3' || k == '4' || k == '5' || k == '6' || k == '7') { break; }
	}
	return k;
}

int vbor() {
	char u;
	cout << "Есть промокод?" << endl;
	cout << "1.Да" << endl;
	cout << "2.Нет" << endl;
	while (1) {
		u = _getch();
		if (u == '1' || u == '2') { break; }
	}
	system("cls");
	if (u == '2') {
		cout << "Выберите страну" << endl;
		cout << endl;
		cout << "_____  __________________________            __      _________                                                          ______          " << endl;
		cout << " __ / / /__  ___/__  ___/___  __ )          / /     __  _____/____  ___________________ ______ _______ _____  __        __|__ )        " << endl;
		cout << "_  / / / _____ ( _____ ( __  /_/ /         / /      _  / __  _  _ )__  ___/__  __ `__ )_  __ `/__  __ )__  / / /        ____/ /         " << endl;
		cout << "/ /_/ /  ____/ / ____/ / _  _, _/         / /       / /_/ /  /  __/_  /    _  / / / / // /_/ / _  / / /_  /_/ /         _  __/         " << endl;
		cout << "(____/   /____/  /____/  /_/ |_|         /_/        (____/   (___/ /_/     /_/ /_/ /_/ (__,_/  /_/ /_/ _(__, /          /____/          " << endl;
		cout << "                                                                                                       /____/                           " << endl;
		cout << endl;
		char k;
		while (1) {
			k = _getch();
			if (k == '1' || k == '2') { break; }
		}
		system("cls");
		if (k == '1') {
			return 1;
		}
		if (k == '2') {
			return 2;
		}
	}
	if (u == '1') {
		int h;
		cout << "Введите промокод: ";
		cin >> h;
		if (h > 134500) {
			cout << "_____  _________________" << endl;
			cout << "__  / / /__  ___/___    |" << endl;
			cout << "_  / / / _____ ) __  /| |" << endl;
			cout << "/ /_/ /  ____/ / _  ___ |" << endl;
			cout << "(____/   /____/  /_/  |_|" << endl;
			cout << endl;
			cout << "Вы играете за USA!!!" << endl;
			Sleep(3000);
			system("cls");
			return 3;
		}
		else {
			cout << "Неправильный промокод" << endl;
			Sleep(3000);
			system("cls");
			return vbor();
		}
	}
}

void razrabotchiki() {
	cout << "\t\t\tРазработчики" << endl;
	cout << endl;
	cout << "       |..____________________, ,                           Дмитрий Рашкевич  https://vk.com/id174991598" << endl;
	cout << "      / `---___________----_____|]– - – - – - – - - - -D  Cтруй Антон  https://vk.com/id492190814" << endl;
	cout << "     /_==o;;;;;;;;_______.:/" << endl;
	cout << "     ), ---.(_(__) /" << endl;
	cout << "    // (..) ),      " << endl;
	cout << "   //___//" << endl;
	cout << "  //___//" << endl;
	cout << endl;
}

int xodsovet(arta& f, arta& v, char f1, char v1) {
	int xod = 0;
	char k;
	while (xod != 2) {
		while (1) {
			k = _getch();
			if (k == 'a' || k == 'd' || k == 'w' || k == 's' || k == 'q' || k == 'r') { break; }
		}
		switch (k)
		{
		case 'w':
			system("cls");
			f.top(f1);
			f.print();
			xod += 1;
			break;
		case 'd':
			system("cls");
			f.right(f1);
			f.print();
			xod += 1;
			break;
		case 's':
			system("cls");
			f.under(f1);
			f.print();
			xod += 1;
			break;
		case 'q':
			system("cls");
			int K5;
			K5 = f.sovetartsuper(v1);
			if (K5 == 1) {
				f.print();
				cout << "Победа" << endl;
				Sleep(7000);
				return 1;
				break;
			}
			if (K5 == 2) {
				f.print();
				Sleep(3000);
				xod += 1;
				break;
			}
			if (K5 == 3) {
				cout << "Нельзя применить!" << endl;
				Sleep(3000);
				system("cls");
				f.print();
				break;
			}
		case 'a':
			system("cls");
			f.left(f1);
			f.print();
			xod += 1;
			break;
		case'r':
			f.pri();
			system("cls");
			f.print();
			char u = '0';
			while (u != 'e') {
				while (1) {
					u = _getch();
					if (u == 'a' || u == 'd' || u == 'w' || u == 's' || u == 'e') { break; }
				}
				switch (u)
				{
				case 'a':
					system("cls");
					f.upravprileft();
					f.print();
					break;
				case 'd':
					system("cls");
					f.upravpriright();
					f.print();
					break;
				case 'w':
					system("cls");
					f.upravpritop();
					f.print();
					break;
				case 's':
					system("cls");
					f.upravpriunder();
					f.print();
					break;
				case 'e':
					int d;
					d = f.shot(v1);
					if (d == 1) {
						cout << "Победа" << endl;
						Sleep(7000);
						return 1;
						break;
					}
					if (d == 3) {
						Sleep(3000);
						xod -= 1;
						system("cls");
						f.print();
						break;
					}
					else {
						system("cls");
						f.print();
						break;
					}
				}
			}
			xod += 1;
			break;
		}
	}
	return 0;
}

int xodamerica(arta& f, arta& v, char f1, char v1) {
	int xod = 0;
	char k;
	while (xod != 2) {
		while (1) {
			k = _getch();
			if (k == 'a' || k == 'd' || k == 'w' || k == 's' || k == 'q' || k == 'r') { break; }
		}
		switch (k)
		{
		case 'w':
			system("cls");
			f.top(f1);
			f.print();
			xod += 1;
			break;
		case 'd':
			system("cls");
			f.right(f1);
			f.print();
			xod += 1;
			break;
		case 's':
			system("cls");
			f.under(f1);
			f.print();
			xod += 1;
			break;
		case 'q':
			int K5;
			int T, N;
			cout << "Введите координаты фугасного удара" << endl;
			cin >> T;
			cin >> N;
			K5 = f.americanartsuper(T, N, v1);
			if (K5 == 1) {
				system("cls");
				f.print();
				cout << "Победа" << endl;
				Sleep(7000);
				return 1;
				break;
			}
			if (K5 == 2) {
				system("cls");
				f.print();
				Sleep(3000);
				xod += 1;
				break;
			}
			if (K5 == 3) {
				cout << "Нельзя применить!" << endl;
				Sleep(3000);
				system("cls");
				f.print();
				break;
			}
		case 'a':
			system("cls");
			f.left(f1);
			f.print();
			xod += 1;
			break;
		case'r':
			f.pri();
			system("cls");
			f.print();
			char u = '0';
			while (u != 'e') {
				while (1) {
					u = _getch();
					if (u == 'a' || u == 'd' || u == 'w' || u == 's' || u == 'e') { break; }
				}
				switch (u)
				{
				case 'a':
					system("cls");
					f.upravprileft();
					f.print();
					break;
				case 'd':
					system("cls");
					f.upravpriright();
					f.print();
					break;
				case 'w':
					system("cls");
					f.upravpritop();
					f.print();
					break;
				case 's':
					system("cls");
					f.upravpriunder();
					f.print();
					break;
				case 'e':
					int d;
					d = f.shot(v1);
					if (d == 1) {
						cout << "Победа" << endl;
						Sleep(7000);
						return 1;
						break;
					}
					if (d == 3) {
						Sleep(3000);
						xod -= 1;
						system("cls");
						f.print();
						break;
					}
					else {
						system("cls");
						f.print();
						break;
					}
				}
			}
			xod += 1;
			break;
		}
	}
	return 0;
}

int xodnem(arta& f, arta& v, char f1, char v1) {
	int xod = 0;
	char k;
	while (xod != 2) {
		while (1) {
			k = _getch();
			if (k == 'a' || k == 'd' || k == 'w' || k == 's' || k == 'q' || k == 'r') { break; }
		}
		switch (k)
		{
		case 'w':
			system("cls");
			f.top(f1);
			f.print();
			xod += 1;
			break;
		case 'd':
			system("cls");
			f.right(f1);
			f.print();
			xod += 1;
			break;
		case 's':
			system("cls");
			f.under(f1);
			f.print();
			xod += 1;
			break;
		case 'a':
			system("cls");
			f.left(f1);
			f.print();
			xod += 1;
			break;
		case 'q':
			int K5;
			int T, N;
			cout << "Введите координаты артиллерийского удара" << endl;
			cin >> T;
			cin >> N;
			K5 = f.nemartsuper(T, N, v1);
			if (K5 == 1) {
				system("cls");
				f.print();
				cout << "Победа" << endl;
				Sleep(7000);
				return 1;
				break;
			}
			if (K5 == 2) {
				system("cls");
				f.print();
				Sleep(3000);    
				xod += 1;
				break;
			}
			if (K5 == 3) {
				cout << "Нельзя применить!" << endl;
				Sleep(3000);
				system("cls");
				f.print();
				break;
			}
		case'r':
			f.pri();
			system("cls");
			f.print();
			char u = '0';
			while (u != 'e') {
				while (1) {
					u = _getch();
					if (u == 'a' || u == 'd' || u == 'w' || u == 's' || u == 'e') { break; }
				}
				switch (u)
				{
				case 'a':
					system("cls");
					f.upravprileft();
					f.print();
					break;
				case 'd':
					system("cls");
					f.upravpriright();
					f.print();
					break;
				case 'w':
					system("cls");
					f.upravpritop();
					f.print();
					break;
				case 's':
					system("cls");
					f.upravpriunder();
					f.print();
					break;
				case 'e':
					int d;
					d = f.shot(v1);
					if (d == 1) {
						cout << "Победа" << endl;
						Sleep(7000);
						return 1;
						break;
					}
					if (d == 3) {
						Sleep(3000);
						xod -= 1;
						system("cls");
						f.print();
						break;
					}
					else {
						system("cls");
						f.print();
						break;
					}
				}
			}
			xod += 1;
			break;
		}
	}
	return 0;
}

const int NotUsed = system("color E0");
const int y = system("mode con cols=1680 lines=640");
int Q = 0;                
int G;
int avtorization = 0;
string* Nick = new string[10000];
string* porol = new string[10000];
int* reutingt = new int[10000];
int* kolmatch = new int[10000];
int* pobed = new int[10000];
int* porogeniu = new int[10000];
double* procent_pobed = new double[10000];
string Nick1;
string porol1;
int reutingt1=0;
int kolmatch1=0;
int pobed1=0;
int porogeniu1=0;
double procent_pobed1=0;


#pragma warning(disable: 4996)

SOCKET Connection;
int Y = 0;
int vborA = 0;
arta S;
arta C;
int BBB = 0;
int QQQ = 0;
int WWW = 0;
char vragarta;
int Gover = 0;
int Index;

void ClientHandler() {
	int msg_size;
	while (true) {
		recv(Connection, (char*)&msg_size, sizeof(int), NULL);
		char *msg = new char[msg_size + 1];
		msg[msg_size] = '\0';
		recv(Connection, msg, msg_size, NULL);
		if (msg[0] == '0' && msg[1] == '0' && msg[2] == '0' && Y == 0) {
			cout << "Connected 2 player!" << endl;
			string msg2 = "000";
			int msg_size2 = msg2.size();
			send(Connection, (char*)&msg_size2, sizeof(int), NULL);
			send(Connection, msg2.c_str(), msg_size2, NULL);
			Y = 1;
			delete[]msg;
		}
		else {
			if (msg[0] == '0' && msg[1] == '0' && msg[2] == '0') {
				delete[]msg;
			}
			else {
				if (msg[0] == '1' && msg[1]=='1' && msg[2]=='1') {
					char w1=msg[3];
					vragarta = w1;
					char w2 = msg[4];
					char w3 = msg[5];
					int i1 = w2 - '0';
					int j1 = w3 - '0';
					incialplayerinternet(C, w1,i1,j1);
					char K[200];
					for (int i = 0; i < 200; i++) {
						K[i] = msg[6 + i];
					}
					C.zapolnenie(K);
					C.peredachakart(S);
					BBB = 1;
					delete[]msg;
				}
				else {
					if (Index == 1) {
						if (msg[0] == 'v') {
							cout << "Вы проиграли!" << endl;
							Gover = 1;
							delete[]msg;
						}
						else {
							if (msg[1] != '\0') {
								QQQ = 1;
								char K[200];
								for (int i = 0; i < 200; i++) {
									K[i] = msg[i];
								}
								C.zapolnenie(K);
								C.peredachakart(S);
								C.peredachakart1(S);
								delete[]msg;
							}
							else {
								delete[]msg;
							}
						}
					}
					if (Index == 2) {
						if (msg[0] == 'v') {
							cout << "Вы проиграли!" << endl;
							Gover = 1;
							delete[]msg;
						}
						else {
							if (msg[0] != '\0') {
								WWW = 1;
								char K[200];
								for (int i = 0; i < 200; i++) {
									K[i] = msg[i];
								}
								C.zapolnenie(K);
								C.peredachakart(S);
								C.peredachakart1(S);
								delete[]msg;
							}
							else {
								delete[]msg;
							}
						}
					}
				}
			}
		}
	}
}

int main() {
	setlocale(0, "");
	char l;
	l = menu();
	system("cls");
	if (l == '4') {
		cout << "1.Управление" << endl;
		cout << "2.Сетевая игра" << endl;
		cout << "3.Об игре" << endl;
		cout << "4.Назад" << endl;
		char N;
		while (1) {
			N = _getch();
			if (N=='1' || N=='2' || N=='3'||N=='4') { break; }
		}
		if (N == '1') {
			system("cls");
			cout<<"w-вперед"<<endl;
			cout<<"a-влево"<<endl;
			cout << "d-вправо" << endl;
			cout << "s-вниз" << endl;
			cout << "q-суперспособность" << endl;
			cout << "r-прицелиться" << endl;
			cout << "e-выстрел" << endl;
			cout << endl;
			cout << "1.Назад" << endl;
			char P;
			while (1) {
				P = _getch();
				if (P == '1') { break; }
			}
			if (P == '1') {
				system("cls");
				return main();
			}
		}
		if (N == '2') {
			system("cls");
			cout << "Чтобы запустить сетевую игру вам нужно!" << endl;
			cout << "1.Запустить сервер на одном из компьютеров." << endl;
			cout << "2.Запустить игру." << endl;
			cout << "Чтобы запусить новую игру перезагрузите сервер!" << endl;
			cout << endl;
			cout << "1.Назад" << endl;
			char GG;
			while (1) {
				GG = _getch();
				if (GG == '1') { break; }
			}
			if (GG == '1') {
				system("cls");
				return main();
			}
		}
		if (N == '3') {
			system("cls");
			cout <<"Даны две карты."<<endl;
			cout << endl;
			char masiv1[11][11];
			char masiv2[11][11];
			for (int i = 0; i <11; i++) {
				for (int j = 0; j <11; j++) {
					masiv1[i][j] = '.';
				}
			}
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					masiv2[i][j] = ' ';
				}
			}
			for (int i = 1; i < 11; i++) {
				masiv2[i][0] = masiv1[i][0] = (char)(((int)'0') + i - 1);
			}
			for (int j = 1; j < 11; j++) {
				masiv2[0][j] = masiv1[0][j] = (char)(((int)'0') + j - 1);
			}
			masiv2[0][0] = masiv1[0][0] = ' ';
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout<<masiv1[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv2[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			cout<<"На 1 карте вы перемещаетесь."<<endl;
			cout <<"На 2 карте вы должны поразить противника."<< endl;
			cout << endl;
			masiv2[6][7] = '+';
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv2[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			masiv2[6][7] = 'O';
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv2[i][j]<<" ";
				}
				cout << endl;
			}
			cout << endl;
			cout << "Если вы промахнулись остается воронка через которую противник не сможет больше ездить." << endl;
			cout << "В том числе и вы." << endl;
			masiv1[5][5] = 'O';
			masiv1[5][4] = '>';
			cout << endl;
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv1[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			cout<<"В игре есть 3 класса."<<endl;
			cout << ">-CCCР" << endl;
			cout << "%-Германия" << endl;
			cout << "$-США" << endl;
			cout << endl;
			cout << "У каждого класса есть свои суперспособности." << endl;
			cout << endl;
			cout << ">-авиаудар.Заполняет 5 случайных клеточек воронками.В наличии 3." << endl;
			masiv2[8][8]=masiv2[2][6]=masiv2[3][3]=masiv2[5][6]=masiv2[6][7] = 'O';
			cout << endl;
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv2[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			cout << "$-фугасный удар.Наносит удар по области.В наличии 3." << endl;
			cout << endl;
			masiv2[8][8] = masiv2[2][6] = masiv2[3][3] = masiv2[5][6] = masiv2[6][7] = ' ';
			masiv2[5][6]=masiv2[6][5]=masiv2[5][4]=masiv2[4][5]=masiv2[5][5] = 'O';
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv2[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			cout << "%-артиллерийский удар.Наносит удар по области.В наличии 2." << endl;
			cout << endl;
			masiv2[6][4]=masiv2[6][6]=masiv2[4][6]=masiv2[4][4] = 'O';
			for (int i = 0; i < 11; i++) {
				for (int j = 0; j < 11; j++) {
					cout << masiv2[i][j] << " ";
				}
				cout << endl;
			}
			cout << endl;
			cout << "За один ход вы можете сделать 2 действия!" << endl;
			cout << endl;
			cout << "1.Назад" << endl;
			char GGB;
			while (1) {
				GGB = _getch();
				if (GGB == '1') { break; }
			}
			if (GGB == '1') {
				system("cls");
				return main();
			}
		}
		if (N == '4') {
			system("cls");
			return main();
		}
	}
	if (l == '6') {
		cout << "Введите индекс 1 или 2 (что бы сыграть по сети у вас должны быть разные индексы)" << endl;
		cin >> Index;
		WSAData wsaData;
		WORD DLLVersion = MAKEWORD(2, 1);
		if (WSAStartup(DLLVersion, &wsaData) != 0) {
			cout << "Error" << endl;
			exit(1);
		}
		 
		SOCKADDR_IN addr;
		int sizeofaddr = sizeof(addr);
		addr.sin_addr.s_addr = inet_addr("127.0.0.1");
		addr.sin_port = htons(1111);
		addr.sin_family = AF_INET;

		Connection = socket(AF_INET, SOCK_STREAM, NULL);
		if (connect(Connection, (SOCKADDR*)&addr, sizeof(addr)) != 0) {
			cout << "Error: failed connect to server.\n";
			Sleep(5000);
			system("cls");
			return main();
		}
		cout << "Connected 1 player!\n";

		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)ClientHandler, NULL, NULL, NULL);

		string msg2 = "000";
		int msg_size2 = msg2.size();
		send(Connection, (char*)&msg_size2, sizeof(int), NULL);
		send(Connection, msg2.c_str(), msg_size2, NULL);
		char w1;
		int i10;
		while (true) {
			if (Gover == 1) {
				Gover = 0;
				Sleep(5000);
				system("cls");
				return main();
			}
			if (vborA == 0 && Y==1) {
				string msg1;
				int w = vbor();
				if (w == 1) {
					w1 = '>';
				}
				if (w == 2) {
					w1 = '%';
				}
				if (w == 3) {
					w1 = '$';
				}
				S.artaa();
				incialplaer(S, w);
				S.print();
				taumer();
				system("cls");
				char s[206];
				S.vborkarta();
				s[0] = s[1] = s[2] = '1';
				s[3] = w1;
				s[4] = (char)(((int)'0') + iii);
				s[5] = (char)(((int)'0') + jjj);
				for (int i = 0; i < 200; i++) {
					s[6 + i] = V[i];
				}
				msg1 = s;
				int msg_size = msg1.size();
				send(Connection, (char*)&msg_size, sizeof(int), NULL);
				send(Connection, msg1.c_str(), msg_size, NULL);
				vborA = 1;
			}
			if (Index==1 && BBB==1) {
				BBB = 0;
				S.print();
				if (w1 == '>') {
					i10 = xodsovet(S, C, w1, vragarta);
				}
				if (w1 == '%') {
					i10 = xodnem(S, C, w1, vragarta);
				}
				if (w1 == '$') {
					i10 = xodamerica(S, C, w1, vragarta);
				}
				if (i10 == 1) {
					Sleep(2000);
					system("cls");
					string msg11;
					msg11= "victori";
					int msg_size11 = msg11.size();
					send(Connection, (char*)&msg_size11, sizeof(int), NULL);
					send(Connection, msg11.c_str(), msg_size11, NULL);
					return main();
				}
				S.vborkarta();
				Sleep(2000);
				system("cls");
				string msg6;
				msg6 = V;
				int msg_size6 = msg6.size();
				send(Connection, (char*)&msg_size6, sizeof(int), NULL);
				send(Connection, msg6.c_str(), msg_size6, NULL);
			}
			if (Index == 1 && QQQ == 1) {
				QQQ = 0;
				S.print();
				if (w1 == '>') {
					i10 = xodsovet(S, C, w1, vragarta);
				}
				if (w1 == '%') {
					i10 = xodnem(S, C, w1, vragarta);
				}
				if (w1 == '$') {
					i10 = xodamerica(S, C, w1, vragarta);
				}
				if (i10 == 1) {
					Sleep(2000);
					system("cls");
					string msg7;
					msg7 = "victori";
					int msg_size7 = msg7.size();
					send(Connection, (char*)&msg_size7, sizeof(int), NULL);
					send(Connection, msg7.c_str(), msg_size7, NULL);
					return main();
				}
				S.vborkarta();
				Sleep(2000);
				system("cls");
				string msg8;
				msg8 = V;
				int msg_size8 = msg8.size();
				send(Connection, (char*)&msg_size8, sizeof(int), NULL);
				send(Connection, msg8.c_str(), msg_size8, NULL);
			}
			if (Index == 2 && WWW==1) {
				WWW = 0;
				S.print();
				if (w1 == '>') {
					i10 = xodsovet(S, C, w1, vragarta);
				}
				if (w1 == '%') {
					i10 = xodnem(S, C, w1, vragarta);
				}
				if (w1 == '$') {
					i10 = xodamerica(S, C, w1, vragarta);
				}
				if (i10 == 1) {
					Sleep(2000);
					system("cls");
					string msg9;
					msg9 = "victori";
					int msg_size9 = msg9.size();
					send(Connection, (char*)&msg_size9, sizeof(int), NULL);
					send(Connection, msg9.c_str(), msg_size9, NULL);
					return main();
				}
				S.vborkarta();
				Sleep(2000);
				system("cls");
				string msg10;
				msg10 = V;
				int msg_size10 = msg10.size();
				send(Connection, (char*)&msg_size10, sizeof(int), NULL);
				send(Connection, msg10.c_str(), msg_size10, NULL);
			}
		}
		system("pause");
		return 0;
	}
	if (l == '2') {
		arta f1;
		arta V;
		int w = vbor();
		char w1;
		if (w == 1) {
			w1 = '>';
		}
		if (w == 2) {
			w1 = '%';
		}
		if (w == 3) {
			w1 = '$';
		}
		int F = vbor();
		char F1;
		if (F == 1) {
			F1 = '>';
		}
		if (F == 2) {
			F1 = '%';
		}
		if (F == 3) {
			F1 = '$';
		}
		cout << "Игрок 1" << endl;
		f1.artaa();
		incialplaer(f1, w);
		f1.print();
		taumer();
		system("cls");
		cout << "Игрок 2" << endl;
		f1.peredachakart(V);
		V.artaa();
		incialplaer(V, F);
		V.print();
		taumer();
		V.peredachakart(f1);
		system("cls");
		int i10;
		int j10;
		for (;;) {
			cout << "Игрок 1" << endl;
			f1.print();
			if (w == 1) {
				i10 = xodsovet(f1, V, w1, F1);
			}
			if (w == 2) {
				i10 = xodnem(f1, V, w1, F1);
			}
			if (w == 3) {
				i10 = xodamerica(f1, V, w1, F1);
			}
			if (i10 == 1) {
				system("cls");
				return main();
			}
			f1.peredachakart(V);
			f1.peredachakart1(V);
			Sleep(2000);
			system("cls");
			taumer();
			system("cls");
			cout << "Игрок 2" << endl;
			V.print();
			if (F == 1) {
				j10 = xodsovet(V, f1, F1, w1);
			}
			if (F == 2) {
				j10 = xodnem(V, f1, F1, w1);
			}
			if (F == 3) {
				j10 = xodamerica(V, f1, F1, w1);
			}
			if (j10 == 1) {
				system("cls");
				return main();
			}
			V.peredachakart(f1);
			V.peredachakart1(f1);
			Sleep(2000);
			system("cls");
			taumer();
			system("cls");
		}
		return main();
	}
	if (l == '1') {
		char v1;
		int p;
		int k34;
		p = vbor();
		k34 = vborcomp();
		if (k34 == 1) {
			v1 = '>';
		}
		if (k34 == 2) {
			v1 = '%';
		}
		arta f;
		arta v;
		f.artaa();
		incialplaer(f, p);
		f.print();
		taumer();
		f.peredachakart(v);
		v.artaa();
		incialcomp(v, k34);
		v.peredachakart(f);
		system("cls");
		if (p == 1) {
			int j;
			int i1;
			int q;
			for (;;) {
				f.print();
				i1 = xodsovet(f, v, '>', v1);
				if (i1 == 1) {
					system("cls");
					/*pobed1 += 1;
					reutingt1 += 25;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				f.peredachakart(v);
				f.peredachakart1(v);
				system("cls");
				q = v.KYDAPoexat(v, v1, '>');
				if (q == 3) {
					system("cls");
					/*porogeniu1 += 1;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				j = v.kompshot('>');
				if (j == 3) {
					system("cls");
					/*porogeniu1 += 1;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				v.peredachakart(f);
				v.peredachakart1(f);
			}
			return main();
		}
		if (p == 2) {
			int j1;
			int i2;
			int q1;
			for (;;) {
				f.print();
				i2 = xodnem(f, v, '%', v1);
				if (i2 == 1) {
					system("cls");
					/*pobed1 += 1;
					reutingt1 += 25;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				f.peredachakart(v);
				f.peredachakart1(v);
				system("cls");
				q1 = v.KYDAPoexat(v, v1, '%');
				if (q1 == 3) {
					system("cls");
					/*porogeniu1 += 1;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				j1 = v.kompshot('%');
				if (j1 == 3) {
					system("cls");
					/*porogeniu1 += 1;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				v.peredachakart(f);
				v.peredachakart1(f);
			}
			return main();
		}
		if (p == 3) {
			int j2;
			int i3;
			int q2;
			for (;;) {
				f.print();
				i3 = xodamerica(f, v, '$', v1);
				if (i3 == 1) {
					system("cls");
					/*pobed1 += 1;
					reutingt1 += 25;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				f.peredachakart(v);
				f.peredachakart1(v);
				system("cls");
				q2 = v.KYDAPoexat(v, v1, '$');
				if (q2 == 3) {
					system("cls");
					/*porogeniu1 += 1;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				j2 = v.kompshot('$');
				if (j2 == 3) {
					system("cls");
					/*porogeniu1 += 1;
					kolmatch1 += 1;
					procent_pobed1 = kolmatch1 / pobed1;*/
					return main();
				}
				v.peredachakart(f);
				v.peredachakart1(f);
			}
			return main();
		}
	}
	if (l == '3') {
		if (Q == 0) {
			cout << "Есть аккаунт ?" << endl;
			cout << "1.Да" << endl;
			cout << "2.Нет" << endl;
			cout << "3.Выход" << endl;
			char m;
			while (1) {
				m = _getch();
				if (m == '1' || m == '2' || m == '3') { break; }
			}
			if (m == '1') {
				system("cls");
				cout << "Введите ник:";
				string b;
				cin >> b;
				cout << "Введите пароль:";
				string j;
				cin >> j;
				ifstream f;
				f.open("D:\\bazadan.txt", ios::in);
				G = 0;
				while (f.eof() != true) {
					string Nick2;
					string porol2;
					int reutingt2;
					int kolmatch2;
					int pobed2;
					int porogeniu2;
					double procent_pobed2;
					f >> Nick2;
					f >> porol2;
					f >> reutingt2;
					f >> kolmatch2;
					f >> pobed2;
					f >> porogeniu2;
					f >> procent_pobed2;
					if (Nick2 == b && porol2 == j) {
						Nick1 = Nick2;
						porol1 = porol2;
						reutingt1 = reutingt2;
						kolmatch1 = kolmatch2;
						pobed1 = pobed2;
						porogeniu1 = porogeniu2;
						procent_pobed1 = procent_pobed2;
						avtorization = 1;
					}
					else {
						Nick[G] = Nick2;
						porol[G] = porol2;
						reutingt[G] = reutingt2;
						kolmatch[G] = kolmatch2;
						pobed[G] = pobed2;
						porogeniu[G] = porogeniu2;
						procent_pobed[G] = procent_pobed2;
						G += 1;
					}
				}
				f.close();
				if (avtorization == 1) {
					cout << "Вы авторизовались !" << endl;
					Q = 1;
					cout << "Ваш ник:" << Nick1 << endl;
					cout << "Рейтинг:" << reutingt1 << endl;
					cout << "Количество матчей:" << kolmatch1 << endl;
					cout << "Побед:" << pobed1 << endl;
					cout << "Поражений:" << porogeniu1 << endl;
					cout << "Процент побед:" << procent_pobed1 * 100 << "%" << endl;
					Sleep(7000);
					system("cls");
					return main();
				}
				else {
					cout << "Неправильный логин или пароль!" << endl;
					Sleep(5000);
					G = 0;
					delete[]Nick;
					delete[]porol;
					delete[]reutingt;
					delete[]kolmatch;
					delete[]pobed;
					delete[]porogeniu;
					delete[]procent_pobed;
					Nick = new string[10000];
					porol = new string[10000];
					reutingt = new int[10000];
					kolmatch = new int[10000];
					pobed = new int[10000];
					porogeniu = new int[10000];
					procent_pobed = new double[10000];
					system("cls");
					return main();
				}

			}
			if (m == '2') {
				system("cls");
				cout << "Введите ник:";
				string b;
				cin >> b;
				cout << "Придумайте пароль:";
				string j;
				cin >> j;
				system("cls");
				Nick1 = b;
				porol1 = j;
				reutingt1 = 0;
				kolmatch1 = 0;
				pobed1 = 0;
				porogeniu1 = 0;
				procent_pobed1 = 0.0;
				cout << "Вы авторизовались !" << endl;
				Q = 1;
				ifstream f;
				f.open("D:\\bazadan.txt", ios::in);
				G = 0;
				if (f.peek() != EOF) {
					while (f.eof() != true) {
						string Nick2;
						string porol2;
						int reutingt2;
						int kolmatch2;
						int pobed2;
						int porogeniu2;
						double procent_pobed2;
						f >> Nick2;
						f >> porol2;
						f >> reutingt2;
						f >> kolmatch2;
						f >> pobed2;
						f >> porogeniu2;
						f >> procent_pobed2;
						Nick[G] = Nick2;
						porol[G] = porol2;
						reutingt[G] = reutingt2;
						kolmatch[G] = kolmatch2;
						pobed[G] = pobed2;
						porogeniu[G] = porogeniu2;
						procent_pobed[G] = procent_pobed2;
						G += 1;
					}
				}
				f.close();
				Sleep(5000);
				system("cls");
				return main();
			}
			if (m == '3') {
				system("cls");
				return main();
			}
		}
		else {
			cout << "Вы авторизовались !" << endl;
			Q = 1;
			cout << "Ваш ник:" << Nick1 << endl;
			cout << "Рейтинг:" << reutingt1 << endl;
			cout << "Количество матчей:" << kolmatch1 << endl;
			cout << "Побед:" << pobed1 << endl;
			cout << "Поражений:" << porogeniu1 << endl;
			cout << "Процент побед:" << procent_pobed1 * 100 << "%" << endl;
			Sleep(7000);
			system("cls");
			return main();
		}
	}
	if (l == '5') {
		razrabotchiki();
		cout << "1.Назад" << endl;
		char u;
		while (1) {
			u = _getch();
			if (u == '1') { break; }
		}
		system("cls");
		return main();
	}
	if (l == '7') {
		if (Q == 1) {
			ofstream f1;
			f1.open("D:\\bazadan.txt", ios::out);
			if (G != 0) {
				for (int i = 0; i < G; i++) {
					f1 << Nick[i] << " " << porol[i] << " " << reutingt[i] << " " << kolmatch[i] << " " << pobed[i] << " " << porogeniu[i] << " " << procent_pobed[i] << " ";
				}
			}
			f1 << Nick1 << " " << porol1 << " " << reutingt1 << " " << kolmatch1 << " " << pobed1 << " " << porogeniu1 << " " << procent_pobed1;
			delete[]Nick;
			delete[]reutingt;
			delete[]porol;
			delete[]kolmatch;
			delete[]pobed;
			delete[]porogeniu;
			delete[]procent_pobed;
			f1.close();
			exit(1);
		}
		else {
			exit(1);
		}
	}
	return 0;
} 
